(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{252:function(t,i,s){"use strict";s.r(i);var e=s(0),o=Object(e.a)({},(function(){var t=this,i=t.$createElement,s=t._self._c||i;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"命令行工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令行工具"}},[t._v("#")]),t._v(" 命令行工具")]),t._v(" "),s("p",[t._v("Koishi 提供了名为 "),s("code",[t._v("koishi")]),t._v(" 的命令行工具，相信你已经在之前的介绍中看过它的使用方法了。本章就详细介绍 Koishi 与命令行相关的特性。")]),t._v(" "),s("h2",{attrs:{id:"koishi-init"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#koishi-init"}},[t._v("#")]),t._v(" koishi init")]),t._v(" "),s("p",[t._v("koishi init 指令用于生成一个 koishi 配置文件，通常是 koishi.config.js。相信看过前几章的你已经对这个文件的结构足够熟悉了。这个指令的完整语法如下：")]),t._v(" "),s("CodeContainer",{attrs:{title:""}},[s("pre",[s("code",[t._v("koishi init [file] [-f]\n")])])]),s("p",[t._v("其中的 "),s("code",[t._v("file")]),t._v(" 参数可以用于指定输出的文件位置（覆盖默认值 koishi.config.js）。如果要输出的位置已经有文件，则 Koishi 会提示你使用 "),s("code",[t._v("-f, --forced")]),t._v(" 选项，这个选项将告诉 Koishi 覆盖已经存在的文件。")]),t._v(" "),s("h3",{attrs:{id:"设置生成的文件类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设置生成的文件类型"}},[t._v("#")]),t._v(" 设置生成的文件类型 "),s("Badge",{attrs:{text:"1.3.0+"}})],1),t._v(" "),s("p",[t._v("除了 js 格式以外，Koishi 还支持其他几种格式的输出。只需向 "),s("code",[t._v("file")]),t._v(" 参数传入具有相应后缀名的文件，Koishi 就会生成对应格式的输出。目前支持的类型有：")]),t._v(" "),s("ul",[s("li",[t._v("js")]),t._v(" "),s("li",[t._v("json (1.3.0+)")]),t._v(" "),s("li",[t._v("yml, yaml (1.3.0+)")]),t._v(" "),s("li",[t._v("ts (1.4.0+)")])]),t._v(" "),s("h2",{attrs:{id:"koishi-start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#koishi-start"}},[t._v("#")]),t._v(" koishi start")]),t._v(" "),s("p",[t._v("koishi start（或 koishi run）指令用于运行一个配置文件。它的完整语法为：")]),t._v(" "),s("CodeContainer",{attrs:{title:""}},[s("pre",[s("code",[t._v("koishi start [file] [--log-level <level>|--debug|--slient]\n")])])]),s("p",[t._v("其中 "),s("code",[t._v("file")]),t._v(" 参数表示要执行的文件位置。文件尾的后缀名可以省略，Koishi 会自动寻找可用的文件作为配置文件（各种文件格式的最低所需版本与上面所述的相同）。")]),t._v(" "),s("p",[s("code",[t._v("--log-level")]),t._v(" 选项用于控制输出等级，"),s("code",[t._v("--debug")]),t._v(" 和 "),s("code",[t._v("--silent")]),t._v(" 则表示输出等级为 3 和 0 的两种特殊情况，参见 "),s("router-link",{attrs:{to:"/guide/logger.html#在-cli-中控制输出"}},[t._v("在 CLI 中控制输出")]),t._v(" 一节。")],1),t._v(" "),s("h3",{attrs:{id:"自动重启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动重启"}},[t._v("#")]),t._v(" 自动重启")]),t._v(" "),s("h3",{attrs:{id:"使用-typescript"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用-typescript"}},[t._v("#")]),t._v(" 使用 TypeScript "),s("Badge",{attrs:{text:"1.4.0+"}})],1),t._v(" "),s("p",[t._v("Koishi 支持直接调用 TypeScript 编写的插件。首先安装 ts-node：")]),t._v(" "),s("CodeContainer",{attrs:{title:""}},[s("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[s("code",[s("span",{staticStyle:{color:"#F8F8F2"}},[t._v("npm i ts-node -D ")]),s("span",{staticStyle:{color:"#75715E"}},[t._v("# 或者全局安装 -g")])])])]),s("p",[t._v("接着在你的命令行之后加上一段额外的参数：")]),t._v(" "),s("CodeContainer",{attrs:{title:""}},[s("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[s("code",[s("span",{staticStyle:{color:"#F8F8F2"}},[t._v("koishi start -- -r ts-node/register")])])])]),s("p",[t._v("这样你就可以直接使用 koishi.config.ts，或在 koishi.config.js 中引用 ts 文件作为插件了。")])],1)}),[],!1,null,null,null);i.default=o.exports}}]);