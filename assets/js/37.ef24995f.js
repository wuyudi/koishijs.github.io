(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{268:function(t,s,a){"use strict";a.r(s);var o=a(0),e=Object(o.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"接收和发送信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接收和发送信息"}},[t._v("#")]),t._v(" 接收和发送信息")]),t._v(" "),a("p",[t._v("从本节开始，我们开始深入研究如何利用 Koishi 的来接收和发送信息。如果你不是一个插件开发者，你可以选择跳过本节和接下来的几个章节。但如果你对如何开发 Koishi 感兴趣，那么真正有趣的部分才刚刚开始。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("接下来的教程可能会涉及对 Koishi API 的调用。如果你不知道如何用这些 API 运行你的机器人，你可能需要查看 "),a("router-link",{attrs:{to:"/guide/getting-started.html#调用-koishi"}},[t._v("调用 Koishi")]),t._v(" 一节。如果你想获得某个 API 的具体用法，你可以参考 "),a("router-link",{attrs:{to:"/api/"}},[t._v("API 文档")]),t._v(" 。")],1)]),t._v(" "),a("h2",{attrs:{id:"接收器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接收器"}},[t._v("#")]),t._v(" 接收器 (receiver)")]),t._v(" "),a("p",[t._v("一个"),a("strong",[t._v("接收器")]),t._v("是一个 "),a("a",{attrs:{href:"https://nodejs.org/api/events.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("EventEmitter"),a("OutboundLink")],1),t._v("，你可以像这样调用它：")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("app.receiver.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("on")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'message'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", (")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("meta")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 如果收到“人有多大胆”")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (meta.message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("===")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'人有多大胆'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 就回应“地有多大产”")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    meta.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("$send")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'地有多大产'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(")")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  }")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("})")])])])]),a("p",[t._v("在这个简单的示例中，这里有两件事你需要了解：")]),t._v(" "),a("p",[t._v("上面的 "),a("code",[t._v("meta")]),t._v(" 对象被称为"),a("strong",[t._v("元信息")]),t._v("。元信息具有通用的结构，只要是来自 "),a("a",{attrs:{href:"https://cqhttp.cc/docs/4.12/#/Post",target:"_blank",rel:"noopener noreferrer"}},[t._v("CQHTTP 的事件"),a("OutboundLink")],1),t._v("，无论类型都会被解析成这个统一结构。你可以在本节的最后查看 "),a("a",{attrs:{href:"#meta-%E5%AF%B9%E8%B1%A1"}},[t._v("Meta 对象的详细结构")]),t._v("。")]),t._v(" "),a("p",[t._v("上面的 "),a("code",[t._v("message")]),t._v(" 字符串被称为"),a("strong",[t._v("事件名称")]),t._v("。Koishi 的事件名和 "),a("code",[t._v("meta.postType")]),t._v(" 字段进行对应。同时，根据 postType 的不同，Koishi 会相应地添加二级事件。二级事件和一级事件会被同时触发，因此你只需要根据具体的需求监听其中的一个即可。例如，一个 postType 为 "),a("code",[t._v("notice")]),t._v("，noticeType 为 "),a("code",[t._v("group_upload")]),t._v(" 的事件会同时触发 "),a("code",[t._v("notice")]),t._v(" 和 "),a("code",[t._v("notice/group_upload")]),t._v(" 两个监听器。")]),t._v(" "),a("p",[t._v("除去由 CQHTTP 提供的事件外，Koishi 自身也提供了一批事件，你可以在 "),a("router-link",{attrs:{to:"/api/receiver.html"}},[t._v("接收器")]),t._v(" 一章中看到目前支持的所有事件名。")],1),t._v(" "),a("h2",{attrs:{id:"发送器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发送器"}},[t._v("#")]),t._v(" 发送器 (sender)")]),t._v(" "),a("p",[t._v("一个"),a("strong",[t._v("发送器")]),t._v("封装了一套 "),a("a",{attrs:{href:"https://cqhttp.cc/docs/4.12/#/API",target:"_blank",rel:"noopener noreferrer"}},[t._v("CQHTTP API"),a("OutboundLink")],1),t._v("。你可以像这样调用它：")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#75715E"}},[t._v("// 向服务器发送信息")]),t._v("\n"),a("span",{staticStyle:{color:"#F92672"}},[t._v("await")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" app.sender.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("sendPrivateMsg")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("123456789")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", ")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'Hello world'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(")")]),t._v("\n\n"),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 从服务器获取信息")]),t._v("\n"),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("const")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" groupInfo ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("await")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" app.sender.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("getGroupInfo")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("987654321")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(")")])])])]),a("p",[t._v("如果你熟悉 CQHTTP API 的话，这对你一定不陌生。没错，这套接口和 CQHTTP 提供的接口是一一对应的。除此以外，由于 Koishi 全部使用 TypeScript 编写，我们还提供了完整的类型定义，让你在编写代码时再也不无需查看 CQHTTP 文档。你可以在 "),a("router-link",{attrs:{to:"/api/sender.html"}},[t._v("发送器")]),t._v(" 一章中看到完整的 Sender API。")],1),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("尽管 Koishi 总体支持 CQHTTP 3.0，但是部分接口需要更高的 CQHTTP 版本才能进行调用。因此，我们建议你永远使用最新的 CQHTTP 版本。")])]),t._v(" "),a("h3",{attrs:{id:"异步调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步调用"}},[t._v("#")]),t._v(" 异步调用")]),t._v(" "),a("p",[t._v("CQHTTP 提出了"),a("strong",[t._v("异步调用")]),t._v("的概念，当 CQHTTP 服务器受到异步调用请求时，如果调用正确，将直接返回 200。这样做的好处是，如果某些操作有较长的耗时（例如发送含有大量图片的信息或清空数据目录等）或你不关心调用结果，使用异步调用可以有效防止阻塞。下面说明了异步调用和普通调用的关系：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/async-method.png",alt:"async-method"}})]),t._v(" "),a("p",[t._v("但是另一方面，你也无法得知异步调用是否成功被执行。与此同时，没有副作用的异步调用也毫无意义（因为这些调用本身就是为了获取某些信息，但是异步调用是无法获取调用结果的）。因此，Koishi 为除此以外的所有异步调用都提供了 API，它们的调用接口与非异步的版本除了在方法后面加了一个 "),a("code",[t._v("Async")]),t._v(" 外没有任何区别：")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#75715E"}},[t._v("// 普通版本")]),t._v("\n"),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("const")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" messageId ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("await")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" app.sender.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("sendPrivateMsg")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("123456789")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", ")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'Hello world'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(")")]),t._v("\n\n"),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 异步版本，无法获得调用结果")]),t._v("\n"),a("span",{staticStyle:{color:"#F92672"}},[t._v("await")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" app.sender.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("sendPrivateMsgAsync")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("123456789")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", ")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'Hello world'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(")")])])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("ol",[a("li",[t._v("虽然异步调用方法的名字以 Async 结尾，但是其他方法也是"),a("strong",[t._v("异步函数")]),t._v("，它们都会返回一个 "),a("code",[t._v("Promise")]),t._v(" 对象。取这样的名字只是为了与 CQHTTP 保持一致。")]),t._v(" "),a("li",[t._v("CQHTTP 的异步调用是在 4.0 版本引入的，但 Koishi 会自动检测当前使用的 CQHTTP 版本并做出 polyfill，因此所有函数的异步版本所需的最低 CQHTTP 版本都与非异步版本一致。")])])]),t._v(" "),a("h3",{attrs:{id:"快捷操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快捷操作"}},[t._v("#")]),t._v(" 快捷操作")]),t._v(" "),a("p",[t._v("Koishi 还提供了一套快捷操作 API。它们会根据事件的类型绑定在 Meta 对象上。例如，当收到一个群消息时，对应的 Meta 对象会自动附加一个 "),a("code",[t._v("$delete")]),t._v(" 方法，调用这个方法可以快速实现对此信息的撤回（需要群主或管理员权限）；又例如，当收到一个好友申请时，对应的 Meta 对象会自动附加一个 "),a("code",[t._v("$approve")]),t._v(" 方法，调用这个方法可以快速实现通过好友申请，并写上备注名。快捷操作的响应速度会高于普通的 Sender API 调用，但是同上面的异步调用一样，这些操作也是无法获得调用结果的。完整的快捷操作列表参见 "),a("a",{attrs:{href:"#koishi-%E6%B7%BB%E5%8A%A0%E7%9A%84%E5%B1%9E%E6%80%A7"}},[t._v("Koishi 添加的属性")]),t._v("。")]),t._v(" "),a("p",[t._v("这里也简单介绍一下快捷操作的原理。当正常使用 HTTP 模式时，每个事件上报和 API 调用都使用了不同的连接。那么快捷操作则相当于将 API 调用作为事件上报的响应。当然，这种做法有着很多限制，例如对 WebSocket 无效，同一个事件只能响应一次，以及需要手动处理响应超时的问题。因此，默认情况下这种优化是不开启的。如果手动配置了 "),a("code",[t._v("quickOperationTimeout")]),t._v("，则会将这个配置项作为时间限制，在这个时间限制内第一个调用快捷操作的会享受这种优化（事实上大部分操作都只有一个响应，所以这种优化对 HTTP 往往是非常有效的），之后的所有快捷操作调用都会自动转化为异步调用，这样可以保证快捷操作永远都是可用的。")]),t._v(" "),a("p",[t._v("下面这张图比较了使用 HTTP 时，快捷操作与默认机制的区别：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/quick-operation.png",alt:"quick-operation"}})]),t._v(" "),a("h2",{attrs:{id:"中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中间件"}},[t._v("#")]),t._v(" 中间件 (middleware)")]),t._v(" "),a("p",[t._v("有了接收器和发送器，似乎你就能完成一切工作了——很多机器人框架也的确是这么想的。但是从 Koishi 的角度，这还远远不够。当载入的功能越来越多后，另一些严重的问题将逐渐浮现出来：如何限制信息能触发的应答次数？如何进行权限管理？如何提高机器人的性能？这些问题的答案将我们引向另一套更高级的系统——这也就是"),a("strong",[t._v("中间件")]),t._v("的由来。")]),t._v(" "),a("p",[t._v("中间件是对信息事件处理流程的再封装。你注册的所有中间件将会由一个事件监听器进行统一管理，数据流向下游，控制权流回上游——这可以有效确保了任意信息都只被处理一次。被认定为无需继续处理的信息不回进入下游的中间件——这让我们能够轻易地实现权限管理。与此同时，Koishi 的中间件也支持异步调用，这使得你可以在中间件函数中实现任何逻辑。事实上，相比更加底层地调用 receiver，"),a("strong",[t._v("使用中间件处理信息才是 Koishi 更加推荐的做法")]),t._v("。")]),t._v(" "),a("p",[t._v("中间件的本质是下面的函数。看起来挺简单的，不是吗？我们将在下面详细介绍它的运作方式。")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#66D9EF"}},[t._v("type")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("NextFunction")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("next")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("?:")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("NextFunction")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("any")]),t._v("\n"),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("type")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("Middleware")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("meta")]),a("span",{staticStyle:{color:"#F92672"}},[t._v(":")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("Meta")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", ")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("next")]),a("span",{staticStyle:{color:"#F92672"}},[t._v(":")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("NextFunction")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("any")])])])]),a("h3",{attrs:{id:"注册和取消中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册和取消中间件"}},[t._v("#")]),t._v(" 注册和取消中间件")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("app.middleware")]),t._v(" 注册中间件。这个方法接受一个回调函数，其第一个参数为一个 Meta 对象，第二个参数是 "),a("code",[t._v("next")]),t._v(" 函数，只有调用了它才会进入接下来的流程。如果自始至终都没有调用 "),a("code",[t._v("next")]),t._v(" 函数的话，之后的中间件都将不会被执行。")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("app.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("middleware")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("((")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("meta")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", ")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (meta.message.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("includes")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("`[CQ:at,qq=${app.options.selfId}]`")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(")) {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 仅当接收到的信息包含 at 机器人时才继续处理")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("return")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("()")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  }")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("})")])])])]),a("p",[t._v("你也可以显式地取消一个中间件：")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#75715E"}},[t._v("// callback 是之前传入 app.middleware 的回调函数")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("app.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("removeMiddleware")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(callback)")])])])]),a("h3",{attrs:{id:"注册异步中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册异步中间件"}},[t._v("#")]),t._v(" 注册异步中间件")]),t._v(" "),a("p",[t._v("下面给出一个异步的中间件作为示例：")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("app.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("middleware")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("async")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("meta")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", ")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 获取数据库中的用户信息")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 这里只是示例，事实上 Koishi 会自动获取数据库中的信息并存放在 meta.$user 中")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("const")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" user ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("await")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" app.database.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("getUser")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(meta.userId)")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (user.authority ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("===")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("0")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("return")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" meta.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("$send")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'抱歉，你没有权限访问机器人。'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(")")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  } ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("else")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("return")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("()")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  }")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("})")])])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("上述代码中 next 前面的 return 是必须的。如果删去将可能会导致时序错误，这在 Koishi 中将会抛出一个运行时警告。")])]),t._v(" "),a("h3",{attrs:{id:"注册前置中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册前置中间件"}},[t._v("#")]),t._v(" 注册前置中间件")]),t._v(" "),a("p",[t._v("从上面的两个例子中不难看出，中间件是一种信息过滤的利器。但是反过来，当你需要的恰恰是捕获全部信息时，中间件反而不会是最佳选择——因为前置的中间件可能会将信息过滤掉，导致你注册的回调函数根本不被执行。因此在这种情况下，我们更推荐使用接收器。然而，还存在着这样一种情况：你既需要捕获全部的信息，又要对其中的一些加以回复，这又该怎么处理呢？")]),t._v(" "),a("p",[t._v("听起来这种需求有些奇怪，让我们举个具体点例子吧：假如你写的是一个复读插件，它需要在每次连续接收到 3 条相同信息时进行复读。我们不难使用接收器实现这种逻辑：")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#66D9EF"}},[t._v("let")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("0")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 复读次数")]),t._v("\n"),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("let")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("''")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 当前信息")]),t._v("\n\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("app.receiver.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("on")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'message'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", (")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("meta")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 这里其实有个小问题，因为来自不同群的信息都会触发这个回调函数")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 因此理想的做法应该是分别记录每个群的当前信息和复读次数")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 但这里我们假设机器人只处理一个群，这样可以简化逻辑")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (meta.message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("===")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" message) {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("+=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("1")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("===")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("3")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") meta.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("$send")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(message)")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  } ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("else")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("0")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" meta.message")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  }")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("})")])])])]),a("p",[t._v("但是这样写出的机器人就存在所有用接收器写出的机器人的通病——如果这条信息本身可以触发其他回应，机器人就会多次回应。更糟糕的是，你无法预测哪一次回应先发生，因此这样写出的机器人就会产生延迟复读的迷惑行为。为了避免这种情况发生，Koishi 对这种情况也有对应的解决方案，那就是前置中间件：")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#66D9EF"}},[t._v("let")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("0")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 复读次数")]),t._v("\n"),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("let")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("''")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 当前信息")]),t._v("\n\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("app.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("prependMiddleware")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("((")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("meta")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", ")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (meta.message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("===")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" message) {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("+=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("1")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("===")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("3")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("return")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" meta.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("$send")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(message)")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  } ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("else")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("0")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" meta.message")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("return")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("()")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  }")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("})")])])])]),a("h3",{attrs:{id:"注册临时中间件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注册临时中间件"}},[t._v("#")]),t._v(" 注册临时中间件")]),t._v(" "),a("p",[t._v("有的时候，你也可能需要实现这样一种逻辑：你的中间件产生了一个响应，但你认为这个响应优先级较低，希望等后续中间件执行完毕后，如果信号仍然未被截取，就执行之前的响应。这当然可以通过注册新的中间件并取消的方法来实现，但是由于这个新注册的中间件可能不被执行，你需要手动处理许多的边界情况。")]),t._v(" "),a("p",[t._v("为了应对这种问题 Koishi 提供了更加方便的写法：你只需要在调用 "),a("code",[t._v("next")]),t._v(" 时再次传入一个回调函数即可！这个回调函数只接受一个 "),a("code",[t._v("next")]),t._v(" 参数，且只会加入当前的中间件执行队列；无论这个回调函数执行与否，在本次中间件解析完成后，它都会被清除。下面是一个例子：")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("app.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("middleware")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("((")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("meta")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", ")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (meta.message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("===")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'hlep'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 如果该 meta 没有被截获，则这里的回调函数将会被执行")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("return")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(() ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" meta.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("$send")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("'你想说的是 help 吗？'")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("))")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  } ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("else")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("return")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("()")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  }")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("})")])])])]),a("p",[t._v("除此以外，临时中间件还有下面的用途。让我们先回到上面介绍的前置中间件。它虽然能够成功解决问题，但是如果有两个插件都注册了类似的前置中间件，就仍然可能发生一个前置中间件截获了信息，导致另一个前置中间件获取不到信息的情况发生。但是，借助临时中间件，我们便有了更好的解决方案：")]),t._v(" "),a("CodeContainer",{attrs:{title:""}},[a("pre",{staticClass:"shiki",staticStyle:{"background-color":"#272822"}},[a("code",[a("span",{staticStyle:{color:"#66D9EF"}},[t._v("let")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("0")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 复读次数")]),t._v("\n"),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("let")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#E6DB74"}},[t._v("''")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#75715E"}},[t._v("// 当前信息")]),t._v("\n\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("app.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("prependMiddleware")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("((")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("meta")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(", ")]),a("span",{staticStyle:{color:"#FD971F"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (meta.message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("===")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" message) {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("+=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("1")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("if")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" (times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("===")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("3")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(") ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("return")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(() ")]),a("span",{staticStyle:{color:"#66D9EF"}},[t._v("=>")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" meta.")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("$send")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("(message))")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  } ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("else")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" {")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    times ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#AE81FF"}},[t._v("0")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    message ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("=")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" meta.message")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("    ")]),a("span",{staticStyle:{color:"#F92672"}},[t._v("return")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v(" ")]),a("span",{staticStyle:{color:"#A6E22E"}},[t._v("next")]),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("()")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("  }")]),t._v("\n"),a("span",{staticStyle:{color:"#F8F8F2"}},[t._v("})")])])])]),a("p",[t._v("搭配使用上面几种中间件，你的机器人便拥有了无限可能。在 "),a("code",[t._v("koishi-plugin-common")]),t._v(" 库中，就有着一个官方实现的复读功能，它远比上面的示例所显示的更加强大。如果想深入了解中间件机制，可以去研究一下这个功能的 "),a("a",{attrs:{href:"https://github.com/koishijs/koishi/blob/master/packages/plugin-common/src/repeater.ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("源代码"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"深入-meta-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深入-meta-对象"}},[t._v("#")]),t._v(" 深入 Meta 对象")]),t._v(" "),a("p",[t._v("本节将深入介绍 Meta 对象的全部属性。除了所有属性都会被转换成 camelCase 以外，Meta 对象的属性与 CQHTTP 事件上报的属性是一一对应的。其中，以 "),a("code",[t._v("$")]),t._v(" 开头的是 Koishi 添加的属性。")]),t._v(" "),a("h3",{attrs:{id:"基本属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本属性"}},[t._v("#")]),t._v(" 基本属性")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("postType:")]),t._v(" "),a("code",[t._v("'message' | 'notice' | 'request'| 'meta_event'")])]),t._v(" "),a("li",[a("strong",[t._v("selfId:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 机器人自身 ID")]),t._v(" "),a("li",[a("strong",[t._v("userId:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 涉及的用户 ID")]),t._v(" "),a("li",[a("strong",[t._v("groupId:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 涉及的群 ID")]),t._v(" "),a("li",[a("strong",[t._v("discussId:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 涉及的讨论组 ID")])]),t._v(" "),a("h3",{attrs:{id:"message-型元数据属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#message-型元数据属性"}},[t._v("#")]),t._v(" message 型元数据属性")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("messageType:")]),t._v(" "),a("code",[t._v("'private' | 'group' | 'discuss'")])]),t._v(" "),a("li",[a("strong",[t._v("subType:")]),t._v(" "),a("ul",[a("li",[t._v("如果是私聊消息："),a("code",[t._v("'friend' | 'group' | 'discuss' | 'other'")])]),t._v(" "),a("li",[t._v("如果是群消息："),a("code",[t._v("'normal' | 'anonymous' | 'notice'")])])])]),t._v(" "),a("li",[a("strong",[t._v("messageId:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 信息 ID，用于撤回等")]),t._v(" "),a("li",[a("strong",[t._v("message:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 消息内容")]),t._v(" "),a("li",[a("strong",[t._v("rawMessage:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 原始消息内容")]),t._v(" "),a("li",[a("strong",[t._v("font:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 字体")]),t._v(" "),a("li",[a("strong",[t._v("sender:")]),t._v(" "),a("code",[t._v("SenderInfo")]),t._v(" 发送人信息\n"),a("ul",[a("li",[a("strong",[t._v("userId:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 用户 ID")]),t._v(" "),a("li",[a("strong",[t._v("nickname:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 昵称")]),t._v(" "),a("li",[a("strong",[t._v("sex:")]),t._v(" "),a("code",[t._v("'male' | 'female' | 'unknown'")])]),t._v(" "),a("li",[a("strong",[t._v("age:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 年龄")]),t._v(" "),a("li",[a("strong",[t._v("title:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 专属头衔（仅限群消息）")]),t._v(" "),a("li",[a("strong",[t._v("card:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 群名片 / 备注（仅限群消息）")]),t._v(" "),a("li",[a("strong",[t._v("area:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 地区（仅限群消息）")]),t._v(" "),a("li",[a("strong",[t._v("level:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 成员等级（仅限群消息）")]),t._v(" "),a("li",[a("strong",[t._v("role:")]),t._v(" "),a("code",[t._v("'owner' | 'admin' | 'member'")]),t._v("（仅限群消息）")])])]),t._v(" "),a("li",[a("strong",[t._v("anonymous:")]),t._v(" "),a("code",[t._v("AnonymousInfo")]),t._v(" 匿名信息\n"),a("ul",[a("li",[a("strong",[t._v("id:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 匿名用户 ID")]),t._v(" "),a("li",[a("strong",[t._v("name:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 用户名称")]),t._v(" "),a("li",[a("strong",[t._v("flag:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 匿名用户 flag，在调用禁言 API 时需要传入")])])])]),t._v(" "),a("h3",{attrs:{id:"notice-型元数据属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#notice-型元数据属性"}},[t._v("#")]),t._v(" notice 型元数据属性")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("noticeType:")]),t._v(" "),a("code",[t._v("'group_upload' | 'group_admin' | 'group_increase' | 'group_ban' | 'friend_add'")])]),t._v(" "),a("li",[a("strong",[t._v("subType:")]),t._v(" "),a("ul",[a("li",[t._v("如果是管理员变动："),a("code",[t._v("'set' | 'unset'")])]),t._v(" "),a("li",[t._v("如果是群成员增加："),a("code",[t._v("'approve' | 'invite'")])]),t._v(" "),a("li",[t._v("如果是群成员减少："),a("code",[t._v("'leave' | 'kick' | 'kick_me'")])]),t._v(" "),a("li",[t._v("如果是群禁言："),a("code",[t._v("'ban' | 'lift_ban'")])])])]),t._v(" "),a("li",[a("strong",[t._v("operatorId:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 操作者 ID")]),t._v(" "),a("li",[a("strong",[t._v("duration:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 禁言时长（秒）")]),t._v(" "),a("li",[a("strong",[t._v("file:")]),t._v(" "),a("code",[t._v("FileInfo")]),t._v(" 文件信息\n"),a("ul",[a("li",[a("strong",[t._v("id:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 文件 ID")]),t._v(" "),a("li",[a("strong",[t._v("name:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 文件名")]),t._v(" "),a("li",[a("strong",[t._v("size:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 文件大小（字节）")]),t._v(" "),a("li",[a("strong",[t._v("busid:")]),t._v(" "),a("code",[t._v("number")])])])])]),t._v(" "),a("h3",{attrs:{id:"request-型元数据属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request-型元数据属性"}},[t._v("#")]),t._v(" request 型元数据属性")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("requestType:")]),t._v(" "),a("code",[t._v("'friend' | 'group'")])]),t._v(" "),a("li",[a("strong",[t._v("subType:")]),t._v(" "),a("code",[t._v("'add' | 'invite'")]),t._v("（如果是加群请求）")]),t._v(" "),a("li",[a("strong",[t._v("comment:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 验证信息")]),t._v(" "),a("li",[a("strong",[t._v("flag:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 请求 flag，在调用处理请求的 API 时需要传入")])]),t._v(" "),a("h3",{attrs:{id:"metaevent-型元数据属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metaevent-型元数据属性"}},[t._v("#")]),t._v(" metaEvent 型元数据属性")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("metaEventType:")]),t._v(" "),a("code",[t._v("'lifecycle' | 'heartbeat'")])]),t._v(" "),a("li",[a("strong",[t._v("subType:")]),t._v(" "),a("code",[t._v("'enable' | 'disable'")]),t._v("（如果是生命周期）")]),t._v(" "),a("li",[a("strong",[t._v("interval:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 到下次心跳的间隔（毫秒）")]),t._v(" "),a("li",[a("strong",[t._v("status:")]),t._v(" "),a("code",[t._v("StatusInfo")]),t._v(" 状态信息，请参考 "),a("router-link",{attrs:{to:"/api/sender.html#sender-getstatus"}},[t._v("getStatus")]),t._v(" 的返回值")],1)]),t._v(" "),a("h3",{attrs:{id:"koishi-添加的属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#koishi-添加的属性"}},[t._v("#")]),t._v(" Koishi 添加的属性")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("$ctxId:")]),t._v(" "),a("code",[t._v("number")]),t._v(" 事件发生的上下文 ID")]),t._v(" "),a("li",[a("strong",[t._v("$ctxType:")]),t._v(" "),a("code",[t._v("'user' | 'group' | 'discuss'")]),t._v(" 事件发生的上下文类型")]),t._v(" "),a("li",[t._v("数据库相关属性：\n"),a("ul",[a("li",[a("strong",[t._v("$user:")]),t._v(" "),a("code",[t._v("User")]),t._v(" 一个观测中的用户数据对象")]),t._v(" "),a("li",[a("strong",[t._v("$group:")]),t._v(" "),a("code",[t._v("GroupData")]),t._v(" 一个群数据对象")])])]),t._v(" "),a("li",[t._v("message 事件相关属性：\n"),a("ul",[a("li",[a("strong",[t._v("$send:")]),t._v(" "),a("code",[t._v("(message: string, autoEscape?: boolean) => Promise<void>")]),t._v(" 向当前上下文发送信息")]),t._v(" "),a("li",[t._v("以下三个方法为群消息事件特有，且执行时需要群主或管理员权限：\n"),a("ul",[a("li",[a("strong",[t._v("$ban:")]),t._v(" "),a("code",[t._v("(duration?: number) => Promise<void>")]),t._v(" 将发言用户禁言")]),t._v(" "),a("li",[a("strong",[t._v("$kick:")]),t._v(" "),a("code",[t._v("() => Promise<void>")]),t._v(" 将发言用户踢出该群")]),t._v(" "),a("li",[a("strong",[t._v("$delete:")]),t._v(" "),a("code",[t._v("() => Promise<void>")]),t._v(" 撤回当前信息")])])]),t._v(" "),a("li",[a("strong",[t._v("$parsed:")]),t._v(" 一个对象，包含了对消息内容初步解析的结果。拥有下列属性：\n"),a("ul",[a("li",[a("strong",[t._v("atMe:")]),t._v(" "),a("code",[t._v("boolean")]),t._v(" 是否在消息头部 at 机器人")]),t._v(" "),a("li",[a("strong",[t._v("nickname:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 消息头部匹配到的 "),a("code",[t._v("nickname")]),t._v("，如果没有则为空串")]),t._v(" "),a("li",[a("strong",[t._v("prefix:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 消息头部匹配到的 "),a("code",[t._v("commandPrefix")]),t._v("，如果没有则为 "),a("code",[t._v("null")])]),t._v(" "),a("li",[a("strong",[t._v("message:")]),t._v(" "),a("code",[t._v("string")]),t._v(" 除去以上三项外的消息内容，会进行 trim 并自动转成简体汉字")])])])])]),t._v(" "),a("li",[t._v("request 事件相关属性：\n"),a("ul",[a("li",[a("strong",[t._v("$approve:")]),t._v(" "),a("code",[t._v("(remark?: string) => Promise<void>")]),t._v(" 同意申请，且如果是好友申请可以设置备注名")]),t._v(" "),a("li",[a("strong",[t._v("$reject:")]),t._v(" "),a("code",[t._v("(reason?: string) => Promise<void>")]),t._v(" 拒绝申请，且如果是群申请可以设置拒绝理由")])])])])],1)}),[],!1,null,null,null);s.default=e.exports}}]);